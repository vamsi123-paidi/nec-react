
React Form Handling Guide for Students
======================================

📁 Folder Structure
-------------------
react-form-handling/
├── public/
├── src/
│   ├── components/
│   │   ├── BasicForm.jsx
│   │   ├── ControlledForm.jsx
│   │   ├── UncontrolledForm.jsx
│   │   ├── FormWithValidation.jsx
│   │   └── MultiStepForm.jsx
│   ├── App.jsx
│   └── index.js

🧠 React Form Handling Concepts
===============================

1. Basic Form Handling
-----------------------
- Concept: Using useState to manage form input.
- Example: A simple form that takes a name input and shows an alert on submit.

Example Code:
-------------
import { useState } from 'react';

export default function BasicForm() {
  const [name, setName] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    alert(`Hello, ${name}`);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        placeholder="Enter name"
        value={name}
        onChange={(e) => setName(e.target.value)}
      />
      <button type="submit">Submit</button>
    </form>
  );
}

2. Controlled Components
-------------------------
- Concept: React has full control over input using state.
- Used for handling forms with multiple fields.

Example Code:
-------------
import { useState } from 'react';

export default function ControlledForm() {
  const [form, setForm] = useState({ email: '', password: '' });

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log(form);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input name="email" value={form.email} onChange={handleChange} placeholder="Email" />
      <input name="password" value={form.password} onChange={handleChange} placeholder="Password" type="password" />
      <button>Login</button>
    </form>
  );
}

3. Uncontrolled Components (Refs)
---------------------------------
- Concept: UseRef is used to access input values directly without state.

Example Code:
-------------
import { useRef } from 'react';

export default function UncontrolledForm() {
  const inputRef = useRef();

  const handleSubmit = (e) => {
    e.preventDefault();
    alert(`Value: ${inputRef.current.value}`);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input ref={inputRef} type="text" placeholder="Enter value" />
      <button type="submit">Submit</button>
    </form>
  );
}

4. Form With Validation
------------------------
- Concept: Add custom validations before form submission.
- Validations can be done manually or with libraries.

Example Code:
-------------
import { useState } from 'react';

export default function FormWithValidation() {
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');

  const validate = () => {
    if (!email.includes('@')) {
      setError('Invalid email address');
      return false;
    }
    setError('');
    return true;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validate()) {
      alert(`Submitted: ${email}`);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
      />
      {error && <p style={{ color: 'red' }}>{error}</p>}
      <button type='submit'>Submit</button>
    </form>
  );
}

More Validations to Try:
-------------------------
- Required Fields: if (value.trim() === '') setError('Required')
- Length Check: if (password.length < 6) setError('Too short')
- Confirm Password Match
- Regex Validation: /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z]{2,}$/i

5. Multi-Step Form
-------------------
- Concept: Separate large forms into smaller logical steps.

Example Code:
-------------
import { useState } from 'react';

export default function MultiStepForm() {
  const [step, setStep] = useState(1);
  const [data, setData] = useState({ name: '', age: '' });

  const handleChange = (e) => {
    setData({ ...data, [e.target.name]: e.target.value });
  };

  const next = () => setStep(step + 1);
  const prev = () => setStep(step - 1);

  const handleSubmit = (e) => {
    e.preventDefault();
    alert(JSON.strinygify(data));
  };

  return (
    <form onSubmit={handleSubmit}>
      {step === 1 && (
        <>
          <input name="name" value={data.name} onChange={handleChange} placeholder="Name" />
          <button type="button" onClick={next}>Next</button>
        </>
      )}
      {step === 2 && (
        <>
          <input name="age" value={data.age} onChange={handleChange} placeholder="Age" />
          <button type="button" onClick={prev}>Back</button>
          <button type="submit">Submit</button>
        </>
      )}
    </form>
  );
}

🧪 Tips for Practicing Form Validations
----------------------------------------
- Create login, registration, feedback forms with required validations.
- Add validations for email format, password strength, required fields.
- Try using Formik and react-hook-form for better scalability.

✅ Summary
-----------
- useState: For controlled inputs
- useRef: For uncontrolled inputs
- Form validation: Always prevent invalid data
- Libraries: Formik, react-hook-form, Yup
- Use multi-step for long forms
