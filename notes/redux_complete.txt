üî∞ 1. What is Redux?
Redux is a state management library for JavaScript apps (mostly used with React) that helps you manage and centralize the application state.

> Single source of truth ‚Äî One centralized place to store the state of your entire application.

üß† 2. Why Redux?
Problem:
- As apps grow, state becomes harder to manage.
- Prop drilling becomes messy.
- Local state scattered across components.

Solution:
- Redux centralizes state.
- Components dispatch actions to update state.
- Predictable and traceable state transitions.

üß± 3. Core Principles
1. Single Source of Truth
2. State is Read-Only
3. Pure Functions (Reducers)

üîÑ 4. Redux Data Flow
UI ‚Üí dispatch(action) ‚Üí reducer ‚Üí store ‚Üí UI re-renders

üèóÔ∏è 5. Structure of a Redux Application
src/
‚îú‚îÄ‚îÄ redux/
‚îÇ   ‚îú‚îÄ‚îÄ store.jsx
‚îÇ   ‚îú‚îÄ‚îÄ slices/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ counterSlice.jsx
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ Counter.jsx
‚îú‚îÄ‚îÄ App.jsx
‚îî‚îÄ‚îÄ index.jsx

üßæ 6. Step-by-Step Redux with Example

Step 1: Install Redux Toolkit
npm install @reduxjs/toolkit react-redux

Step 2: Create counterSlice.js
-----------------------------
import { createSlice } from '@reduxjs/toolkit';

const counterSlice = createSlice({
  name: 'counter',
  initialState: { value: 0 },
  reducers: {
    increment: state => { state.value += 1 },
    decrement: state => { state.value -= 1 },
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    }
  }
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export default counterSlice.reducer;

Step 3: Create store.js
-----------------------------
import { configureStore } from '@reduxjs/toolkit';
import counterReducer from './slices/counterSlice';

const store = configureStore({
  reducer: {
    counter: counterReducer
  }
});

export default store;

Step 4: index.js
-----------------------------
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { Provider } from 'react-redux';
import store from './redux/store';

ReactDOM.createRoot(document.getElementById('root')).render(
  <Provider store={store}>
    <App />
  </Provider>
);

Step 5: Counter.jsx
-----------------------------
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement, incrementByAmount } from '../redux/slices/counterSlice';

const Counter = () => {
  const count = useSelector(state => state.counter.value);
  const dispatch = useDispatch();

  return (
    <div>
      <h1>Counter: {count}</h1>
      <button onClick={() => dispatch(increment())}> + </button>
      <button onClick={() => dispatch(decrement())}> - </button>
      <button onClick={() => dispatch(incrementByAmount(5))}> +5 </button>
    </div>
  );
};

export default Counter;

üìå 7. Redux Key Concepts
- Store
- Slice
- Action
- Reducer
- Dispatch
- Selector

üß∞ 8. Redux Toolkit (RTK)
Simplifies Redux with utilities like createSlice, configureStore, createAsyncThunk.


üîÑ REDUX ASYNC THUNKS ‚Äî Complete Guide with Example

Redux handles asynchronous operations using `createAsyncThunk` from Redux Toolkit.

‚úÖ Use Case:
Fetching data from an API and updating the state accordingly.

üß± Folder Structure:
src/
‚îú‚îÄ‚îÄ redux/
‚îÇ   ‚îú‚îÄ‚îÄ store.js
‚îÇ   ‚îú‚îÄ‚îÄ slices/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ postsSlice.js
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îî‚îÄ‚îÄ Posts.jsx
‚îú‚îÄ‚îÄ App.js
‚îî‚îÄ‚îÄ index.js

üì¶ Step-by-Step Code Setup

1Ô∏è‚É£ Install Packages:
npm install @reduxjs/toolkit react-redux

2Ô∏è‚É£ store.js
-----------------------------
import { configureStore } from '@reduxjs/toolkit';
import postsReducer from './slices/postsSlice';

const store = configureStore({
  reducer: {
    posts: postsReducer
  }
});

export default store;

3Ô∏è‚É£ postsSlice.js
-----------------------------
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

// Async thunk
export const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts');
  const data = await res.json();
  return data;
});

const postsSlice = createSlice({
  name: 'posts',
  initialState: {
    posts: [],
    loading: false,
    error: null
  },
  reducers: {},
  extraReducers: builder => {
    builder
      .addCase(fetchPosts.pending, state => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchPosts.fulfilled, (state, action) => {
        state.loading = false;
        state.posts = action.payload;
      })
      .addCase(fetchPosts.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  }
});

export default postsSlice.reducer;

4Ô∏è‚É£ Posts.jsx 
-----------------------------
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchPosts } from '../redux/slices/postsSlice';

const Posts = () => {
  const dispatch = useDispatch();
  const { posts, loading, error } = useSelector(state => state.posts);

  useEffect(() => {
    dispatch(fetchPosts());
  }, [dispatch]);

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error}</p>;

  return (
    <div>
      <h2>Posts</h2>
      {posts.map(post => (
        <div key={post.id}>
          <h4>{post.title}</h4>
          <p>{post.body}</p>
        </div>
      ))}
    </div>
  );
};

export default Posts;

5Ô∏è‚É£ App.js
-----------------------------
import React from 'react';
import Posts from './components/Posts';

function App() {
  return (
    <div className="App">
      <h1>Redux Async Thunk Example</h1>
      <Posts />
    </div>
  );
}

export default App;

6Ô∏è‚É£ index.js
-----------------------------
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { Provider } from 'react-redux';
import store from './redux/store';

ReactDOM.createRoot(document.getElementById('root')).render(
  <Provider store={store}>
    <App />
  </Provider>
);

üìö Summary
- `createAsyncThunk()` is used to fetch API data.
- `extraReducers` handle different states: pending, fulfilled, rejected.
- `useEffect()` in component triggers the thunk.
- Redux store keeps track of loading, data, and errors.

üéØ This is a complete working project that you can run and demo.


üìö 10. When to Use Redux
‚úÖ For large apps with shared state, caching, debugging
‚ùå Avoid for simple apps ‚Äî Context or local state is better

üìã 11. Best Practices
- Use Redux Toolkit
- Keep state normalized
- Use createAsyncThunk
- Split logic into slices

üß™ 12. Real-Life Examples
- Authentication
- Shopping cart
- Theme toggles
- Notifications

‚öîÔ∏è 13. Redux vs Context API

| Feature         | Redux             | Context API       |
|----------------|-------------------|-------------------|
| Use case        | Large scale apps  | Small apps        |
| Setup           | Medium (w/ RTK)   | Easy              |
| Debugging       | Excellent         | Limited           |
| Async support   | Built-in          | Not built-in      |
| Performance     | Optimized         | May re-render     |

üéì 14. Redux Interview Questions
1. What is Redux?
2. What are the three principles?
3. Reducer's role?
4. Redux vs Context?
5. Redux Toolkit?
6. Async ops?
7. Thunk?
8. Dispatch workflow?
9. Immutability?
10. Multiple reducers?

üöÄ 15. Custom Hook Example

// hooks/useCounter.js
-----------------------------
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement } from '../redux/slices/counterSlice';

const useCounter = () => {
  const value = useSelector(state => state.counter.value);
  const dispatch = useDispatch();

  return {
    value,
    increment: () => dispatch(increment()),
    decrement: () => dispatch(decrement())
  };
};

export default useCounter;


üß± REDUX PROJECT STRUCTURE (16-POINT GUIDE) ‚Äî WITH COMPLETE EXECUTION & CODE

This guide outlines a structured Redux project using Redux Toolkit and React.
It explains each part of the structure with code snippets and implementation.

üì¶ PROJECT STRUCTURE:
src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îî‚îÄ‚îÄ store.js                    # Redux store setup
‚îú‚îÄ‚îÄ features/
‚îÇ   ‚îî‚îÄ‚îÄ products/
‚îÇ       ‚îú‚îÄ‚îÄ productsSlice.js       # Products state + reducers + async thunk
‚îÇ       ‚îî‚îÄ‚îÄ ProductsList.jsx       # UI component to display products
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îî‚îÄ‚îÄ Header.jsx                 # Reusable header component
‚îú‚îÄ‚îÄ App.js                         # Root app component
‚îú‚îÄ‚îÄ index.js                       # App entry point
‚îú‚îÄ‚îÄ styles/
‚îÇ   ‚îî‚îÄ‚îÄ app.css                    # Global styling

üìå POINT 1: Install Packages
npm install @reduxjs/toolkit react-redux

üìå POINT 2: Create the Redux Store (app/store.js)
------------------------------------
import { configureStore } from '@reduxjs/toolkit';
import productsReducer from '../features/products/productsSlice';

export const store = configureStore({
  reducer: {
    products: productsReducer
  }
});

üìå POINT 3: Create Products Slice (features/products/productsSlice.js)
------------------------------------
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

export const fetchProducts = createAsyncThunk('products/fetchProducts', async () => {
  const res = await fetch('https://fakestoreapi.com/products');
  return await res.json();
});

const productsSlice = createSlice({
  name: 'products',
  initialState: {
    items: [],
    loading: false,
    error: null
  },
  reducers: {},
  extraReducers: builder => {
    builder
      .addCase(fetchProducts.pending, state => {
        state.loading = true;
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        state.loading = false;
        state.items = action.payload;
      })
      .addCase(fetchProducts.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  }
});

export default productsSlice.reducer;

üìå POINT 4: Create the ProductsList UI Component (features/products/ProductsList.jsx)
------------------------------------
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchProducts } from './productsSlice';

const ProductsList = () => {
  const dispatch = useDispatch();
  const { items, loading, error } = useSelector(state => state.products);

  useEffect(() => {
    dispatch(fetchProducts());
  }, [dispatch]);

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error}</p>;

  return (
    <div>
      <h2>Product List</h2>
      {items.map(product => (
        <div key={product.id}>
          <h4>{product.title}</h4>
          <p>${product.price}</p>
        </div>
      ))}
    </div>
  );
};

export default ProductsList;

üìå POINT 5: Reusable Header Component (components/Header.jsx)
------------------------------------
import React from 'react';

const Header = () => {
  return <header><h1>Redux Store</h1></header>;
};

export default Header;

üìå POINT 6: Create App Component (App.js)
------------------------------------
import React from 'react';
import Header from './components/Header';
import ProductsList from './features/products/ProductsList';

function App() {
  return (
    <div className="App">
      <Header />
      <ProductsList />
    </div>
  );
}

export default App;

üìå POINT 7: Entry Point (index.js)
------------------------------------
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { Provider } from 'react-redux';
import { store } from './app/store';
import './styles/app.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <Provider store={store}>
    <App />
  </Provider>
);

üìå POINT 8: Global Styles (styles/app.css)
------------------------------------
body {
  font-family: Arial;
  padding: 20px;
  background-color: #f7f7f7;
}


üìå POINT 10: Thunks handle pending, fulfilled, rejected states
Handled automatically in productsSlice using extraReducers.

üìå POINT 11: Data is stored in Redux store
Can be accessed with `useSelector(state => state.products.items)`

üìå POINT 12: Reusability
Components like `Header` can be used anywhere without duplication.

üìå POINT 13: Separation of Concerns
All Redux logic is inside features/products, keeping UI clean.

üìå POINT 14: API handled inside slice (or use utils/api.js)
This keeps the code modular.

üìå POINT 15: Scalable and Maintainable
New features can follow the same structure.

üìå POINT 16: Fully Executable
Run the app with `npm start` after setup.

